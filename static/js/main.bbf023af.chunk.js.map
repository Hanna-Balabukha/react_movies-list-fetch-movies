{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","handler","_useState","useState","_useState2","_slicedToArray","setMovie","_useState3","_useState4","loader","setLoader","_useState5","_useState6","query","setQuery","_useState7","_useState8","hasTitleError","setHasTitleError","queryNormalize","trim","_Fragment","onSubmit","event","preventDefault","fetch","concat","then","res","json","catch","Response","Error","getMovie","toLowerCase","newMovie","Poster","Title","Plot","imdbID","normalize","finally","htmlFor","type","id","placeholder","value","onChange","target","classNames","disabled","onClick","undefined","App","setMovies","_toConsumableArray","find","item","allMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbf023af.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={movie.imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {movie.description}\n          <br />\n          <a href={movie.imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { ResponseError } from '../../types/ReponseError';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  handler: (movie: Movie | undefined) => void\n};\n\nexport const FindMovie: React.FC<Props> = ({ handler }) => {\n  const [movie, setMovie] = useState<Movie>();\n  const [loader, setLoader] = useState(false);\n  const [query, setQuery] = useState('');\n  const [hasTitleError, setHasTitleError] = useState('');\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setHasTitleError('');\n  };\n\n  const queryNormalize = query.trim();\n\n  const normalize = (newMovie: MovieData) => {\n    const {\n      Poster,\n      Title,\n      Plot,\n      imdbID,\n    } = newMovie;\n\n    const link = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\n    if (Poster === 'N/A') {\n      /* eslint-disable no-param-reassign */\n      newMovie.Poster = link;\n    }\n\n    setMovie(\n      {\n        title: Title,\n        description: Plot,\n        imgUrl: newMovie.Poster,\n        imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n        imdbId: imdbID,\n      },\n    );\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setLoader(true);\n    getMovie(queryNormalize.toLowerCase())\n      .then(((newMovie: MovieData | ResponseError) => {\n        if ('Error' in newMovie) {\n          setHasTitleError(`Can${'\\''}t find a movie with such a title`);\n        } else {\n          normalize(newMovie);\n        }\n      }))\n      .finally(() => setLoader(false));\n  };\n\n  const handlerClick = () => {\n    handler(movie);\n    setHasTitleError('');\n    setMovie(undefined);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-danger\"\n              value={query}\n              onChange={handleQuery}\n            />\n          </div>\n\n          {(!movie && hasTitleError)\n            && (\n              <p className=\"help is-danger\" data-cy=\"errorMessage\">\n                {hasTitleError}\n              </p>\n            )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': loader,\n              })}\n              disabled={!queryNormalize}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie\n            && (\n              <div className=\"control\">\n                <button\n                  data-cy=\"addButton\"\n                  type=\"button\"\n                  className=\"button is-primary\"\n                  onClick={handlerClick}\n                >\n                  Add to the list\n                </button>\n              </div>\n            )}\n\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=fd48620b';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const handler = (movie: Movie | undefined) => {\n    if (!movie) {\n      return;\n    }\n\n    const found = [...movies].find((item) => item.imdbId === movie.imdbId);\n\n    if (!found) {\n      setMovies(allMovies => [...allMovies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie handler={handler} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}